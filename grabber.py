"""Script to grab banners of services running on ports"""

import socket


def scan_results(reply):
    for key in reply:
        print(f"\nResults for {key}")
        print(f"{reply.get(key)}", end='')


# Make new ip and pass it along to grab() to attempt banner grab
def ip_gen(stored_replies):
    base_num = 10
    end_num = 200
    while base_num <= end_num:
        if base_num < end_num:
            grab(f"192.168.2.{base_num}", stored_replies)
            base_num += 1
        else:
            grab(f"192.168.2.{base_num}", stored_replies, True)
            scan_results(stored_replies)
            break


# Attempt banner grab using ip generated by ip_gen()
def grab(ip, stored_replies, end_scan=None):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(.1)
        sock.connect((f'{ip}', 22))
        sock.send(b'')
        hostname = socket.gethostbyaddr(f"{ip}")  # Retrieve the hostname using the IP address of responding device
        reply = sock.recv(1024)
        if reply:
            decode_reply = reply.decode()
            stored_replies.update({f"{hostname[0]}": f"{decode_reply}"})
        if end_scan:
            scan_results(stored_replies)
        sock.close()
    except ConnectionRefusedError:
        pass
    except OSError:
        pass


# When ran from command line this will run the ip_gen() function
if __name__ == '__main__':
    stored_replies = dict()
    ip_gen(stored_replies)
